name: CI - testando

on:
  workflow_dispatch:
  push:
    branches:
      - main

env: 
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }} 
  MANIFEST_REPO: crisz-source/manifestos

jobs:

  build-hello-world: 
    runs-on: ubuntu-latest
    env:
      APP_NAME: hello-world
      IMAGE_NAME: hello-world-custom 
      APP_PATH: manifests/hello-world/hello-world.yaml
    steps:
      - name: Checkout código fonte
        uses: actions/checkout@v3

      - name: Clonar repositório de manifests
        uses: actions/checkout@v3
        with:
          repository: ${{ env.MANIFEST_REPO }}
          token: ${{ secrets.MANIFEST_REPO_TOKEN }}
          path: manifests

      - name: Definir próxima tag incremental da imagem
        id: version
        run: |
          cd manifests
          CURRENT=$(grep "image:" $APP_PATH | sed 's/.*://')
          if [[ -z "$CURRENT" ]]; then
            NEW_TAG="1.0"
          else
            MAJOR=$(echo $CURRENT | cut -d. -f1)
            MINOR=$(echo $CURRENT | cut -d. -f2)
            NEW_TAG="$MAJOR.$((MINOR+1))"
          fi
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Login no DockerHub
        run: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Build da imagem Docker
        run: docker build -t $DOCKERHUB_USERNAME/$IMAGE_NAME:${{ steps.version.outputs.new_tag }} ./apps/hello-world/

      - name: Push da imagem para o DockerHub
        run: docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:${{ steps.version.outputs.new_tag }}

      - name: Atualizar tag no manifesto
        run: |
          cd manifests
          sed -i "s|image:.*|image: $DOCKERHUB_USERNAME/$IMAGE_NAME:${{ steps.version.outputs.new_tag }}|" $APP_PATH
      
      - name: Testar se o container sobe corretamente
        run: |
          docker run -d --name test-${{ env.APP_NAME }} -p 3000:3000 $DOCKERHUB_USERNAME/$IMAGE_NAME:${{ steps.version.outputs.new_tag }}
          sleep 5
          if ! docker ps | grep test-${{ env.APP_NAME }}; then
            echo "❌ Falha: container não subiu!"
            exit 1
          fi
          echo "✅ Container iniciou com sucesso!"
          docker rm -f test-${{ env.APP_NAME }}

      - name: Commit e push
        run: |
          cd manifests
          git config user.name "github-actions"
          git config user.email "ci@github.com"
          git add $APP_PATH
          git commit -m "chore($APP_NAME): update image tag to ${{ steps.version.outputs.new_tag }}"
          git push


  build-calculadora:
    needs: build-hello-world  # <-- Só executa depois que o Tomcat rodar
    runs-on: ubuntu-latest
    env:
      APP_NAME: calculadora
      IMAGE_NAME: calculadora-custom
      APP_PATH: manifests/calculadora/nginx-deployment.yaml
    steps:
      - name: Checkout código fonte
        uses: actions/checkout@v3

      - name: Clonar repositório de manifests   # ✅ Clona primeiro
        uses: actions/checkout@v3
        with:
          repository: ${{ env.MANIFEST_REPO }}
          token: ${{ secrets.MANIFEST_REPO_TOKEN }}
          path: manifests

      - name: Definir próxima tag incremental da imagem  # ✅ Só depois acessa
        id: version
        run: |
          cd manifests
          CURRENT=$(grep "image:" $APP_PATH | sed 's/.*://')
          if [[ -z "$CURRENT" ]]; then
            NEW_TAG="1.0"
          else
            MAJOR=$(echo $CURRENT | cut -d. -f1)
            MINOR=$(echo $CURRENT | cut -d. -f2)
            NEW_TAG="$MAJOR.$((MINOR+1))"
          fi
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT


      - name: Login no DockerHub
        run: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

      - name: Build da imagem Docker
        run: docker build -t $DOCKERHUB_USERNAME/$IMAGE_NAME:${{ steps.version.outputs.new_tag }} ./apps/

      - name: Push da imagem para o DockerHub
        run: docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:${{ steps.version.outputs.new_tag }}

      - name: Clonar repositório de manifests
        uses: actions/checkout@v3
        with:
          repository: ${{ env.MANIFEST_REPO }}
          token: ${{ secrets.MANIFEST_REPO_TOKEN }}
          path: manifests

      - name: Atualizar tag no manifesto
        run: |
          cd manifests
          sed -i "s|image:.*|image: $DOCKERHUB_USERNAME/$IMAGE_NAME:${{ steps.version.outputs.new_tag }}|" $APP_PATH

      - name: Testar se container da calculadora sobe corretamente
        run: |
          docker run -d --name test-${{ env.APP_NAME }} -p 8080:8080 $DOCKERHUB_USERNAME/$IMAGE_NAME:${{ steps.version.outputs.new_tag }}
          sleep 5
          if ! docker ps | grep test-${{ env.APP_NAME }}; then
            echo "❌ Falha: container da calculadora não subiu!"
            exit 1
          fi
          echo "✅ Container da calculadora iniciou com sucesso!"
          docker rm -f test-${{ env.APP_NAME }}

      - name: Commit e push
        run: |
          cd manifests
          git config user.name "github-actions"
          git config user.email "ci@github.com"
          git add $APP_PATH
          git commit -m "chore(calculadora): update image tag to ${{ steps.version.outputs.new_tag }}"
          git push




  deploy:
      needs: [build-hello-world, build-calculadora] # <-- Só roda depois dos dois
      runs-on: ubuntu-latest
      steps:
        - name: Clonar repositório de manifests
          uses: actions/checkout@v3
          with:
            repository: ${{ env.MANIFEST_REPO }}
            token: ${{ secrets.MANIFEST_REPO_TOKEN }}
            path: manifests

        - name: Confirmar mudanças no repositório de manifests
          run: |
            cd manifests
            echo "### Alterações aplicadas no repositório de manifests ###"
            git log -2 --oneline
            git status
